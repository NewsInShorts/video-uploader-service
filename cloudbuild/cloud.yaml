steps:  #MAIN SERVER  - name: 'docker'    args: ['pull', 'asia.gcr.io/inshorts-1374/$_APP/$_REPO_NAME-$_MAIN-$_ENV:latest']    id: 'docker-pull-$_MAIN'    wait_for: ['-']  - name: 'docker'    args: ["build",           "-t", "asia.gcr.io/inshorts-1374/$_APP/$_REPO_NAME-$_MAIN-$_ENV:latest",           "-t", "asia.gcr.io/inshorts-1374/$_APP/$_REPO_NAME-$_MAIN-$_ENV:$COMMIT_SHA",           "--build-arg", "_ENV=$_ENV",           "--build-arg", "_REPO_NAME=$_REPO_NAME",           "--cache-from", "asia.gcr.io/inshorts-1374/$_APP/$_REPO_NAME-$_MAIN-$_ENV:latest",           "-f", "docker/Dockerfile_main",           "."]    id: 'docker-build-$_MAIN'    wait_for: ['docker-pull-$_MAIN']  - name: 'docker'    args: ["push" , "--all-tags", "asia.gcr.io/inshorts-1374/$_APP/$_REPO_NAME-$_MAIN-$_ENV"]    wait_for: ['docker-build-$_MAIN']    id: 'docker-push-$_MAIN'  - name: 'gcr.io/cloud-builders/gcloud'    id: 'deploy-$_MAIN'    wait_for: ['docker-push-$_MAIN']    entrypoint: 'bash'    args:      - '-c'      - |        gcloud components install kubectl        gcloud container clusters get-credentials $_CLUSTER_NAME --region $_REGION        if [ "$(echo $(kubectl --namespace=$_NAMESPACE describe deployment $_SERVICE-$_MAIN-$_ENV-deployment > /dev/null 2>&1 && echo 'success'))" = 'success' ]        then        echo "Updating Deployment"        kubectl --namespace=$_NAMESPACE set image deployment/$_SERVICE-$_MAIN-$_ENV-deployment $_SERVICE-$_MAIN-$_ENV=asia.gcr.io/inshorts-1374/$_APP/$_REPO_NAME-$_MAIN-$_ENV:$COMMIT_SHA        else        echo "Building new Deployment"        cat <<EOF | kubectl --namespace=$_NAMESPACE apply -f -        ---        apiVersion: "apps/v1"        kind: "Deployment"        metadata:          name: "$_SERVICE-$_MAIN-$_ENV-deployment"          namespace: "$_NAMESPACE"          labels:            application: "$_SERVICE-$_MAIN-$_ENV-deployment"            team: "$_TEAM"            env: "$_ENV"            app: "$_APP"            service: "$_SERVICE"        spec:          replicas: 6          selector:            matchLabels:              application: "$_SERVICE-$_MAIN-$_ENV-deployment"              team: "$_TEAM"              env: "$_ENV"              app: "$_APP"              service: "$_SERVICE"          strategy:            rollingUpdate:              maxSurge: 4              maxUnavailable: 2          template:            metadata:              labels:                application: "$_SERVICE-$_MAIN-$_ENV-deployment"                team: "$_TEAM"                env: "$_ENV"                app: "$_APP"                service: "$_SERVICE"            spec:              volumes:                - name: cred-files                  projected:                    sources:                    - secret:                        name: prism-key                    - secret:                        name: public-firebase-user              containers:              - name: "$_SERVICE-$_MAIN-$_ENV"                image: "asia.gcr.io/inshorts-1374/$_APP/$_REPO_NAME-$_MAIN-$_ENV:$COMMIT_SHA"                resources:                  limits:                    cpu: 200m                    memory: 256Mi                  requests:                    cpu: 100m                    memory: 128Mi                volumeMounts:                  - name: cred-files                    mountPath: /var/secrets/google                env:                  - name: GOOGLE_APPLICATION_CREDENTIALS                    value: /var/secrets/google/inshorts-1374-943355242dd4.json                  - name: FIREBASE_CONFIG                    value: /var/secrets/google/video-shorts-firebase-adminsdk-327qd-bc6715b7c0.json                  - name: DD_AGENT_HOST                    valueFrom:                      fieldRef:                        apiVersion: v1                        fieldPath: status.hostIP              affinity:                nodeAffinity:                  requiredDuringSchedulingIgnoredDuringExecution:                    nodeSelectorTerms:                      - matchExpressions:                          - key: pool-type                            operator: In                            values:                              - "standard"                  preferredDuringSchedulingIgnoredDuringExecution:                    - weight: 75                      preference:                        matchExpressions:                          - key: pool-type                            operator: In                            values:                              - "standard"                podAntiAffinity:                  preferredDuringSchedulingIgnoredDuringExecution:                    - weight: 1                      podAffinityTerm:                        labelSelector:                          matchLabels:                            application: "$_SERVICE-$_MAIN-$_ENV-deployment"                        topologyKey: kubernetes.io/hostname        ---        apiVersion: "autoscaling/v1"        kind: "HorizontalPodAutoscaler"        metadata:          name: "$_SERVICE-$_MAIN-$_ENV-deployment-hpa"          namespace: "$_NAMESPACE"          labels:            application: "$_SERVICE-$_MAIN-$_ENV-deployment"        spec:          scaleTargetRef:            kind: "Deployment"            name: "$_SERVICE-$_MAIN-$_ENV-deployment"            apiVersion: "apps/v1"          minReplicas: 1          maxReplicas: 2          targetCPUUtilizationPercentage: 80        EOF        fitimeout: 1800s